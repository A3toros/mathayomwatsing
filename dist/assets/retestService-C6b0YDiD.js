const o={async createRetestAssignment(t){const e=await(await window.tokenManager.makeAuthenticatedRequest("/.netlify/functions/create-retest-assignment",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).json();if(!e.success)throw new Error(e.error||"Failed to create retest");return e},async getRetestEligibleStudents({test_type:t,original_test_id:s,threshold:e}){const n=new URLSearchParams({test_type:t,original_test_id:String(s)});e!==void 0&&n.set("threshold",String(e));const r=await(await window.tokenManager.makeAuthenticatedRequest(`/.netlify/functions/get-retest-eligible-students?${n.toString()}`)).json();if(!r.success)throw new Error(r.error||"Failed to load eligible students");return r.students||[]},async getRetestAssignments(t){const s=t?`?teacher_id=${encodeURIComponent(t)}`:"",n=await(await window.tokenManager.makeAuthenticatedRequest(`/.netlify/functions/get-retest-assignments${s}`)).json();if(!n.success)throw new Error(n.error||"Failed to load retests");return n.retests||[]},async getRetestTargets(t){const e=await(await window.tokenManager.makeAuthenticatedRequest(`/.netlify/functions/get-retest-targets?retest_id=${encodeURIComponent(t)}`)).json();if(!e.success)throw new Error(e.error||"Failed to load retest targets");return e.targets||[]},async cancelRetestAssignment(t){const e=await(await window.tokenManager.makeAuthenticatedRequest("/.netlify/functions/cancel-retest-assignment",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({retest_id:t})})).json();if(!e.success)throw new Error(e.error||"Failed to cancel retest");return e.updated===!0}};export{o as retestService};
