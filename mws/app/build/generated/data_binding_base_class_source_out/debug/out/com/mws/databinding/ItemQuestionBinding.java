// Generated by view binder compiler. Do not edit!
package com.mws.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.textfield.TextInputEditText;
import com.mws.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemQuestionBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final RadioButton falseOption;

  @NonNull
  public final TextInputEditText inputAnswer;

  @NonNull
  public final LinearLayout inputAnswerLayout;

  @NonNull
  public final TextInputEditText matchingAnswer;

  @NonNull
  public final LinearLayout matchingLayout;

  @NonNull
  public final RadioGroup multipleChoiceOptions;

  @NonNull
  public final RadioButton optionA;

  @NonNull
  public final RadioButton optionB;

  @NonNull
  public final RadioButton optionC;

  @NonNull
  public final RadioButton optionD;

  @NonNull
  public final TextView questionNumber;

  @NonNull
  public final TextView questionText;

  @NonNull
  public final TextView questionType;

  @NonNull
  public final RadioGroup trueFalseOptions;

  @NonNull
  public final RadioButton trueOption;

  @NonNull
  public final ChipGroup wordBankChips;

  private ItemQuestionBinding(@NonNull CardView rootView, @NonNull RadioButton falseOption,
      @NonNull TextInputEditText inputAnswer, @NonNull LinearLayout inputAnswerLayout,
      @NonNull TextInputEditText matchingAnswer, @NonNull LinearLayout matchingLayout,
      @NonNull RadioGroup multipleChoiceOptions, @NonNull RadioButton optionA,
      @NonNull RadioButton optionB, @NonNull RadioButton optionC, @NonNull RadioButton optionD,
      @NonNull TextView questionNumber, @NonNull TextView questionText,
      @NonNull TextView questionType, @NonNull RadioGroup trueFalseOptions,
      @NonNull RadioButton trueOption, @NonNull ChipGroup wordBankChips) {
    this.rootView = rootView;
    this.falseOption = falseOption;
    this.inputAnswer = inputAnswer;
    this.inputAnswerLayout = inputAnswerLayout;
    this.matchingAnswer = matchingAnswer;
    this.matchingLayout = matchingLayout;
    this.multipleChoiceOptions = multipleChoiceOptions;
    this.optionA = optionA;
    this.optionB = optionB;
    this.optionC = optionC;
    this.optionD = optionD;
    this.questionNumber = questionNumber;
    this.questionText = questionText;
    this.questionType = questionType;
    this.trueFalseOptions = trueFalseOptions;
    this.trueOption = trueOption;
    this.wordBankChips = wordBankChips;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemQuestionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemQuestionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_question, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemQuestionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.falseOption;
      RadioButton falseOption = ViewBindings.findChildViewById(rootView, id);
      if (falseOption == null) {
        break missingId;
      }

      id = R.id.inputAnswer;
      TextInputEditText inputAnswer = ViewBindings.findChildViewById(rootView, id);
      if (inputAnswer == null) {
        break missingId;
      }

      id = R.id.inputAnswerLayout;
      LinearLayout inputAnswerLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputAnswerLayout == null) {
        break missingId;
      }

      id = R.id.matchingAnswer;
      TextInputEditText matchingAnswer = ViewBindings.findChildViewById(rootView, id);
      if (matchingAnswer == null) {
        break missingId;
      }

      id = R.id.matchingLayout;
      LinearLayout matchingLayout = ViewBindings.findChildViewById(rootView, id);
      if (matchingLayout == null) {
        break missingId;
      }

      id = R.id.multipleChoiceOptions;
      RadioGroup multipleChoiceOptions = ViewBindings.findChildViewById(rootView, id);
      if (multipleChoiceOptions == null) {
        break missingId;
      }

      id = R.id.optionA;
      RadioButton optionA = ViewBindings.findChildViewById(rootView, id);
      if (optionA == null) {
        break missingId;
      }

      id = R.id.optionB;
      RadioButton optionB = ViewBindings.findChildViewById(rootView, id);
      if (optionB == null) {
        break missingId;
      }

      id = R.id.optionC;
      RadioButton optionC = ViewBindings.findChildViewById(rootView, id);
      if (optionC == null) {
        break missingId;
      }

      id = R.id.optionD;
      RadioButton optionD = ViewBindings.findChildViewById(rootView, id);
      if (optionD == null) {
        break missingId;
      }

      id = R.id.questionNumber;
      TextView questionNumber = ViewBindings.findChildViewById(rootView, id);
      if (questionNumber == null) {
        break missingId;
      }

      id = R.id.questionText;
      TextView questionText = ViewBindings.findChildViewById(rootView, id);
      if (questionText == null) {
        break missingId;
      }

      id = R.id.questionType;
      TextView questionType = ViewBindings.findChildViewById(rootView, id);
      if (questionType == null) {
        break missingId;
      }

      id = R.id.trueFalseOptions;
      RadioGroup trueFalseOptions = ViewBindings.findChildViewById(rootView, id);
      if (trueFalseOptions == null) {
        break missingId;
      }

      id = R.id.trueOption;
      RadioButton trueOption = ViewBindings.findChildViewById(rootView, id);
      if (trueOption == null) {
        break missingId;
      }

      id = R.id.wordBankChips;
      ChipGroup wordBankChips = ViewBindings.findChildViewById(rootView, id);
      if (wordBankChips == null) {
        break missingId;
      }

      return new ItemQuestionBinding((CardView) rootView, falseOption, inputAnswer,
          inputAnswerLayout, matchingAnswer, matchingLayout, multipleChoiceOptions, optionA,
          optionB, optionC, optionD, questionNumber, questionText, questionType, trueFalseOptions,
          trueOption, wordBankChips);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
