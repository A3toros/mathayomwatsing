// Generated by view binder compiler. Do not edit!
package com.mws.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mws.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTestBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView headerCard;

  @NonNull
  public final CardView navigationCard;

  @NonNull
  public final Button nextButton;

  @NonNull
  public final Button previousButton;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final CardView questionCard;

  @NonNull
  public final TextView questionCounter;

  @NonNull
  public final RecyclerView questionRecyclerView;

  @NonNull
  public final Button submitButton;

  @NonNull
  public final TextView testName;

  @NonNull
  public final TextView testSubject;

  @NonNull
  public final TextView timeRemaining;

  private ActivityTestBinding(@NonNull ConstraintLayout rootView, @NonNull CardView headerCard,
      @NonNull CardView navigationCard, @NonNull Button nextButton, @NonNull Button previousButton,
      @NonNull ProgressBar progressBar, @NonNull CardView questionCard,
      @NonNull TextView questionCounter, @NonNull RecyclerView questionRecyclerView,
      @NonNull Button submitButton, @NonNull TextView testName, @NonNull TextView testSubject,
      @NonNull TextView timeRemaining) {
    this.rootView = rootView;
    this.headerCard = headerCard;
    this.navigationCard = navigationCard;
    this.nextButton = nextButton;
    this.previousButton = previousButton;
    this.progressBar = progressBar;
    this.questionCard = questionCard;
    this.questionCounter = questionCounter;
    this.questionRecyclerView = questionRecyclerView;
    this.submitButton = submitButton;
    this.testName = testName;
    this.testSubject = testSubject;
    this.timeRemaining = timeRemaining;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_test, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.headerCard;
      CardView headerCard = ViewBindings.findChildViewById(rootView, id);
      if (headerCard == null) {
        break missingId;
      }

      id = R.id.navigationCard;
      CardView navigationCard = ViewBindings.findChildViewById(rootView, id);
      if (navigationCard == null) {
        break missingId;
      }

      id = R.id.nextButton;
      Button nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.previousButton;
      Button previousButton = ViewBindings.findChildViewById(rootView, id);
      if (previousButton == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.questionCard;
      CardView questionCard = ViewBindings.findChildViewById(rootView, id);
      if (questionCard == null) {
        break missingId;
      }

      id = R.id.questionCounter;
      TextView questionCounter = ViewBindings.findChildViewById(rootView, id);
      if (questionCounter == null) {
        break missingId;
      }

      id = R.id.questionRecyclerView;
      RecyclerView questionRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (questionRecyclerView == null) {
        break missingId;
      }

      id = R.id.submitButton;
      Button submitButton = ViewBindings.findChildViewById(rootView, id);
      if (submitButton == null) {
        break missingId;
      }

      id = R.id.testName;
      TextView testName = ViewBindings.findChildViewById(rootView, id);
      if (testName == null) {
        break missingId;
      }

      id = R.id.testSubject;
      TextView testSubject = ViewBindings.findChildViewById(rootView, id);
      if (testSubject == null) {
        break missingId;
      }

      id = R.id.timeRemaining;
      TextView timeRemaining = ViewBindings.findChildViewById(rootView, id);
      if (timeRemaining == null) {
        break missingId;
      }

      return new ActivityTestBinding((ConstraintLayout) rootView, headerCard, navigationCard,
          nextButton, previousButton, progressBar, questionCard, questionCounter,
          questionRecyclerView, submitButton, testName, testSubject, timeRemaining);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
