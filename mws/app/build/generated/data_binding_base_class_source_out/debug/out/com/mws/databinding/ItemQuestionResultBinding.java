// Generated by view binder compiler. Do not edit!
package com.mws.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.mws.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemQuestionResultBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final TextView correctAnswer;

  @NonNull
  public final TextView correctAnswerLabel;

  @NonNull
  public final LinearLayout questionHeaderRow;

  @NonNull
  public final TextView questionNumber;

  @NonNull
  public final TextView questionText;

  @NonNull
  public final TextView questionType;

  @NonNull
  public final View resultIndicator;

  @NonNull
  public final TextView userAnswer;

  @NonNull
  public final TextView userAnswerLabel;

  private ItemQuestionResultBinding(@NonNull MaterialCardView rootView,
      @NonNull TextView correctAnswer, @NonNull TextView correctAnswerLabel,
      @NonNull LinearLayout questionHeaderRow, @NonNull TextView questionNumber,
      @NonNull TextView questionText, @NonNull TextView questionType, @NonNull View resultIndicator,
      @NonNull TextView userAnswer, @NonNull TextView userAnswerLabel) {
    this.rootView = rootView;
    this.correctAnswer = correctAnswer;
    this.correctAnswerLabel = correctAnswerLabel;
    this.questionHeaderRow = questionHeaderRow;
    this.questionNumber = questionNumber;
    this.questionText = questionText;
    this.questionType = questionType;
    this.resultIndicator = resultIndicator;
    this.userAnswer = userAnswer;
    this.userAnswerLabel = userAnswerLabel;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemQuestionResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemQuestionResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_question_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemQuestionResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.correctAnswer;
      TextView correctAnswer = ViewBindings.findChildViewById(rootView, id);
      if (correctAnswer == null) {
        break missingId;
      }

      id = R.id.correctAnswerLabel;
      TextView correctAnswerLabel = ViewBindings.findChildViewById(rootView, id);
      if (correctAnswerLabel == null) {
        break missingId;
      }

      id = R.id.questionHeaderRow;
      LinearLayout questionHeaderRow = ViewBindings.findChildViewById(rootView, id);
      if (questionHeaderRow == null) {
        break missingId;
      }

      id = R.id.questionNumber;
      TextView questionNumber = ViewBindings.findChildViewById(rootView, id);
      if (questionNumber == null) {
        break missingId;
      }

      id = R.id.questionText;
      TextView questionText = ViewBindings.findChildViewById(rootView, id);
      if (questionText == null) {
        break missingId;
      }

      id = R.id.questionType;
      TextView questionType = ViewBindings.findChildViewById(rootView, id);
      if (questionType == null) {
        break missingId;
      }

      id = R.id.resultIndicator;
      View resultIndicator = ViewBindings.findChildViewById(rootView, id);
      if (resultIndicator == null) {
        break missingId;
      }

      id = R.id.userAnswer;
      TextView userAnswer = ViewBindings.findChildViewById(rootView, id);
      if (userAnswer == null) {
        break missingId;
      }

      id = R.id.userAnswerLabel;
      TextView userAnswerLabel = ViewBindings.findChildViewById(rootView, id);
      if (userAnswerLabel == null) {
        break missingId;
      }

      return new ItemQuestionResultBinding((MaterialCardView) rootView, correctAnswer,
          correctAnswerLabel, questionHeaderRow, questionNumber, questionText, questionType,
          resultIndicator, userAnswer, userAnswerLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
